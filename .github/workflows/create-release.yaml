name: create-release
# prepare for releasing to prod:
#   convert solution to managed (using a build PowerPlatform environment for the conversion)
#   upload the solution to the GitHub artifacts and deploy to the PROD environment
on:
  workflow_dispatch:
  workflow_run:
    workflows: ["release-solution-to-test"]
    types:
      - completed

jobs:
  convert-to-managed:
    runs-on: windows-latest
    env:
      RUNNER_DEBUG: 1

    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true

      - name: Pack solution
        uses: microsoft/powerplatform-actions/pack-solution@v0
        with:
          solution-folder: solutions/${{ secrets.solutionname }}
          solution-file: out/solutions/${{ secrets.solutionname }}.zip
          solution-type: Unmanaged

      - name: Import solution as unmanaged to build env
        uses: microsoft/powerplatform-actions/import-solution@v0
        with:
          environment-url: ${{ secrets.buildenv }}
          app-id: ${{ secrets.powerplatformsp_appid }}
          client-secret: ${{ secrets.powerplatformsp_secret }}
          tenant-id: ${{ secrets.tenantid }}
          solution-file: out/solutions/${{ secrets.solutionname }}.zip
          force-overwrite: true
          publish-changes: true

      - name: Export solution as managed
        uses: microsoft/powerplatform-actions/export-solution@v0
        with:
          environment-url: ${{ secrets.buildenv }}
          app-id: ${{ secrets.powerplatformsp_appid }}
          client-secret: ${{ secrets.powerplatformsp_secret }}
          tenant-id: ${{ secrets.tenantid }}
          solution-name: ${{ secrets.solutionname }}
          managed: true
          solution-output-file: out/ship/${{ secrets.solutionname }}.zip

      - name: Upload the ready to ship solution to GH artifact store
        uses: actions/upload-artifact@v2
        with:
          name: ${{ secrets.solutionname }}
          path: out/ship/${{ secrets.solutionname }}.zip
          
  create-release:
    name: Create Release
    needs: [convert-to-managed]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name:  ${{ secrets.solutionname }}
      
      - name: Create a Release
        id: create_release
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.PAT }}"
          prerelease: false
          automatic_release_tag: latest
          files: ${{ secrets.solutionname }}.zip
      
#       - name: Upload Release Asset
#         id: upload-release-asset 
#         uses: actions/upload-release-asset@master
#         env:
#          GITHUB_TOKEN: ${{ secrets.PAT }}
#         with:
#           upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
#           asset_path: out/ship/
#           asset_name: ${{ secrets.solutionname }}
#           asset_content_type: application/zip
          
          
    
